namespace Smart.Reflection.Generative.CodeGenerator
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    public class Generator
    {
        private readonly HashSet<string> usings = new HashSet<string>(new[] { "System" });

        public void AddSource(string text)
        {
            var tree = CSharpSyntaxTree.ParseText(text);
            var root = tree.GetRoot();

            foreach (var item in root
                .DescendantNodes()
                .OfType<UsingDirectiveSyntax>()
                .Select(ud => ud.Name.ToString()))
            {
                usings.Add(item);
            }

            // TODO classes
        }

        public string Generate()
        {
            var sb = new StringBuilder(8192);

            sb.Append("// <auto-generated />").AppendLine();

            foreach (var item in usings.OrderBy(x => x))
            {
                sb.Append("using ").Append(item).AppendLine(";");
            }

            sb.AppendLine();

            sb.Append("namespace Smart.Reflection.Generative").AppendLine();
            sb.Append("{").AppendLine();
            sb.Append("    [AttributeUsage (AttributeTargets.Class)]").AppendLine();
            sb.Append("    internal sealed class PreserveAttribute : Attribute").AppendLine();
            sb.Append("    {").AppendLine();
            sb.Append("    }").AppendLine();
            sb.Append("}").AppendLine();

            // TODO classes

            return sb.ToString();
        }
    }
}
